{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9488695,"sourceType":"datasetVersion","datasetId":5772767}],"dockerImageVersionId":30775,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"raw","source":"","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-27T08:47:11.150785Z","iopub.execute_input":"2024-09-27T08:47:11.151306Z","iopub.status.idle":"2024-09-27T08:47:11.618242Z","shell.execute_reply.started":"2024-09-27T08:47:11.151247Z","shell.execute_reply":"2024-09-27T08:47:11.616430Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/prices/sample_submission.csv\n/kaggle/input/prices/data_description.txt\n/kaggle/input/prices/train.csv\n/kaggle/input/prices/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"train_data=pd.read_csv('/kaggle/input/prices/train.csv')\ntest_data=pd.read_csv('/kaggle/input/prices/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:14.197533Z","iopub.execute_input":"2024-09-27T08:47:14.198074Z","iopub.status.idle":"2024-09-27T08:47:14.286815Z","shell.execute_reply.started":"2024-09-27T08:47:14.198034Z","shell.execute_reply":"2024-09-27T08:47:14.285671Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"print(train_data.info())","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:14.488564Z","iopub.execute_input":"2024-09-27T08:47:14.489013Z","iopub.status.idle":"2024-09-27T08:47:14.538051Z","shell.execute_reply.started":"2024-09-27T08:47:14.488971Z","shell.execute_reply":"2024-09-27T08:47:14.536498Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 81 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1460 non-null   int64  \n 1   MSSubClass     1460 non-null   int64  \n 2   MSZoning       1460 non-null   object \n 3   LotFrontage    1201 non-null   float64\n 4   LotArea        1460 non-null   int64  \n 5   Street         1460 non-null   object \n 6   Alley          91 non-null     object \n 7   LotShape       1460 non-null   object \n 8   LandContour    1460 non-null   object \n 9   Utilities      1460 non-null   object \n 10  LotConfig      1460 non-null   object \n 11  LandSlope      1460 non-null   object \n 12  Neighborhood   1460 non-null   object \n 13  Condition1     1460 non-null   object \n 14  Condition2     1460 non-null   object \n 15  BldgType       1460 non-null   object \n 16  HouseStyle     1460 non-null   object \n 17  OverallQual    1460 non-null   int64  \n 18  OverallCond    1460 non-null   int64  \n 19  YearBuilt      1460 non-null   int64  \n 20  YearRemodAdd   1460 non-null   int64  \n 21  RoofStyle      1460 non-null   object \n 22  RoofMatl       1460 non-null   object \n 23  Exterior1st    1460 non-null   object \n 24  Exterior2nd    1460 non-null   object \n 25  MasVnrType     588 non-null    object \n 26  MasVnrArea     1452 non-null   float64\n 27  ExterQual      1460 non-null   object \n 28  ExterCond      1460 non-null   object \n 29  Foundation     1460 non-null   object \n 30  BsmtQual       1423 non-null   object \n 31  BsmtCond       1423 non-null   object \n 32  BsmtExposure   1422 non-null   object \n 33  BsmtFinType1   1423 non-null   object \n 34  BsmtFinSF1     1460 non-null   int64  \n 35  BsmtFinType2   1422 non-null   object \n 36  BsmtFinSF2     1460 non-null   int64  \n 37  BsmtUnfSF      1460 non-null   int64  \n 38  TotalBsmtSF    1460 non-null   int64  \n 39  Heating        1460 non-null   object \n 40  HeatingQC      1460 non-null   object \n 41  CentralAir     1460 non-null   object \n 42  Electrical     1459 non-null   object \n 43  1stFlrSF       1460 non-null   int64  \n 44  2ndFlrSF       1460 non-null   int64  \n 45  LowQualFinSF   1460 non-null   int64  \n 46  GrLivArea      1460 non-null   int64  \n 47  BsmtFullBath   1460 non-null   int64  \n 48  BsmtHalfBath   1460 non-null   int64  \n 49  FullBath       1460 non-null   int64  \n 50  HalfBath       1460 non-null   int64  \n 51  BedroomAbvGr   1460 non-null   int64  \n 52  KitchenAbvGr   1460 non-null   int64  \n 53  KitchenQual    1460 non-null   object \n 54  TotRmsAbvGrd   1460 non-null   int64  \n 55  Functional     1460 non-null   object \n 56  Fireplaces     1460 non-null   int64  \n 57  FireplaceQu    770 non-null    object \n 58  GarageType     1379 non-null   object \n 59  GarageYrBlt    1379 non-null   float64\n 60  GarageFinish   1379 non-null   object \n 61  GarageCars     1460 non-null   int64  \n 62  GarageArea     1460 non-null   int64  \n 63  GarageQual     1379 non-null   object \n 64  GarageCond     1379 non-null   object \n 65  PavedDrive     1460 non-null   object \n 66  WoodDeckSF     1460 non-null   int64  \n 67  OpenPorchSF    1460 non-null   int64  \n 68  EnclosedPorch  1460 non-null   int64  \n 69  3SsnPorch      1460 non-null   int64  \n 70  ScreenPorch    1460 non-null   int64  \n 71  PoolArea       1460 non-null   int64  \n 72  PoolQC         7 non-null      object \n 73  Fence          281 non-null    object \n 74  MiscFeature    54 non-null     object \n 75  MiscVal        1460 non-null   int64  \n 76  MoSold         1460 non-null   int64  \n 77  YrSold         1460 non-null   int64  \n 78  SaleType       1460 non-null   object \n 79  SaleCondition  1460 non-null   object \n 80  SalePrice      1460 non-null   int64  \ndtypes: float64(3), int64(35), object(43)\nmemory usage: 924.0+ KB\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"a= test_data.isnull().sum().sort_values(ascending=False)\nprint(a[a > 0])","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:15.601920Z","iopub.execute_input":"2024-09-27T08:47:15.602408Z","iopub.status.idle":"2024-09-27T08:47:15.619801Z","shell.execute_reply.started":"2024-09-27T08:47:15.602367Z","shell.execute_reply":"2024-09-27T08:47:15.618239Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"PoolQC          1456\nMiscFeature     1408\nAlley           1352\nFence           1169\nMasVnrType       894\nFireplaceQu      730\nLotFrontage      227\nGarageYrBlt       78\nGarageQual        78\nGarageFinish      78\nGarageCond        78\nGarageType        76\nBsmtCond          45\nBsmtQual          44\nBsmtExposure      44\nBsmtFinType1      42\nBsmtFinType2      42\nMasVnrArea        15\nMSZoning           4\nBsmtHalfBath       2\nUtilities          2\nFunctional         2\nBsmtFullBath       2\nBsmtFinSF1         1\nBsmtFinSF2         1\nBsmtUnfSF          1\nKitchenQual        1\nTotalBsmtSF        1\nExterior2nd        1\nGarageCars         1\nExterior1st        1\nGarageArea         1\nSaleType           1\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"for col in ['PoolQC','MiscFeature','Alley','Fence']:\n    train_data[col].fillna('None',inplace=True)\n    test_data[col].fillna('None',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:15.831610Z","iopub.execute_input":"2024-09-27T08:47:15.832878Z","iopub.status.idle":"2024-09-27T08:47:15.845015Z","shell.execute_reply.started":"2024-09-27T08:47:15.832817Z","shell.execute_reply":"2024-09-27T08:47:15.843623Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/85356552.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_data[col].fillna('None',inplace=True)\n/tmp/ipykernel_30/85356552.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna('None',inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"for col in ['GarageFinish','GarageQual','GarageCond','GarageType']:\n    train_data[col].fillna('None',inplace=True)\n    test_data[col].fillna('None',inplace=True)\ntrain_data['GarageYrBlt'].fillna(0,inplace=True)\ntest_data['GarageYrBlt'].fillna(0,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:16.729771Z","iopub.execute_input":"2024-09-27T08:47:16.730817Z","iopub.status.idle":"2024-09-27T08:47:16.746637Z","shell.execute_reply.started":"2024-09-27T08:47:16.730758Z","shell.execute_reply":"2024-09-27T08:47:16.745126Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/3444421824.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_data[col].fillna('None',inplace=True)\n/tmp/ipykernel_30/3444421824.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna('None',inplace=True)\n/tmp/ipykernel_30/3444421824.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_data['GarageYrBlt'].fillna(0,inplace=True)\n/tmp/ipykernel_30/3444421824.py:5: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data['GarageYrBlt'].fillna(0,inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"train_data['LotFrontage']=train_data.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))\ntest_data['LotFrontage']=test_data.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:17.466018Z","iopub.execute_input":"2024-09-27T08:47:17.466520Z","iopub.status.idle":"2024-09-27T08:47:17.505974Z","shell.execute_reply.started":"2024-09-27T08:47:17.466476Z","shell.execute_reply":"2024-09-27T08:47:17.504749Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"for col in ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']:\n    train_data[col].fillna('None',inplace=True)\n    test_data[col].fillna('None',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:17.723319Z","iopub.execute_input":"2024-09-27T08:47:17.723802Z","iopub.status.idle":"2024-09-27T08:47:17.740446Z","shell.execute_reply.started":"2024-09-27T08:47:17.723758Z","shell.execute_reply":"2024-09-27T08:47:17.738977Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/2330530444.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_data[col].fillna('None',inplace=True)\n/tmp/ipykernel_30/2330530444.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna('None',inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"train_data['MasVnrType'].fillna('None', inplace=True)\ntest_data['MasVnrType'].fillna('None', inplace=True)\ntrain_data['MasVnrArea'].fillna(0, inplace=True)\ntest_data['MasVnrArea'].fillna(0, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:18.173261Z","iopub.execute_input":"2024-09-27T08:47:18.173695Z","iopub.status.idle":"2024-09-27T08:47:18.184313Z","shell.execute_reply.started":"2024-09-27T08:47:18.173654Z","shell.execute_reply":"2024-09-27T08:47:18.182940Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/4175926661.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_data['MasVnrType'].fillna('None', inplace=True)\n/tmp/ipykernel_30/4175926661.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data['MasVnrType'].fillna('None', inplace=True)\n/tmp/ipykernel_30/4175926661.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_data['MasVnrArea'].fillna(0, inplace=True)\n/tmp/ipykernel_30/4175926661.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data['MasVnrArea'].fillna(0, inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"train_data['Electrical'].fillna(train_data['Electrical'].mode()[0], inplace=True)\ntest_data['Electrical'].fillna(test_data['Electrical'].mode()[0], inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:18.769412Z","iopub.execute_input":"2024-09-27T08:47:18.769920Z","iopub.status.idle":"2024-09-27T08:47:18.781633Z","shell.execute_reply.started":"2024-09-27T08:47:18.769876Z","shell.execute_reply":"2024-09-27T08:47:18.780403Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/1813284603.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_data['Electrical'].fillna(train_data['Electrical'].mode()[0], inplace=True)\n/tmp/ipykernel_30/1813284603.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data['Electrical'].fillna(test_data['Electrical'].mode()[0], inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"train_data['FireplaceQu'].fillna('None',inplace=True)\ntest_data['FireplaceQu'].fillna('None',inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:19.012461Z","iopub.execute_input":"2024-09-27T08:47:19.012924Z","iopub.status.idle":"2024-09-27T08:47:19.022238Z","shell.execute_reply.started":"2024-09-27T08:47:19.012881Z","shell.execute_reply":"2024-09-27T08:47:19.020997Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/3542005183.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train_data['FireplaceQu'].fillna('None',inplace=True)\n/tmp/ipykernel_30/3542005183.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data['FireplaceQu'].fillna('None',inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(train_data.select_dtypes(include=['object']).columns)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:19.347151Z","iopub.execute_input":"2024-09-27T08:47:19.348313Z","iopub.status.idle":"2024-09-27T08:47:19.355825Z","shell.execute_reply.started":"2024-09-27T08:47:19.348267Z","shell.execute_reply":"2024-09-27T08:47:19.354535Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Index(['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature',\n       'SaleType', 'SaleCondition'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"print(train_data.info())","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:19.527258Z","iopub.execute_input":"2024-09-27T08:47:19.528239Z","iopub.status.idle":"2024-09-27T08:47:19.554923Z","shell.execute_reply.started":"2024-09-27T08:47:19.528158Z","shell.execute_reply":"2024-09-27T08:47:19.553618Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 81 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1460 non-null   int64  \n 1   MSSubClass     1460 non-null   int64  \n 2   MSZoning       1460 non-null   object \n 3   LotFrontage    1460 non-null   float64\n 4   LotArea        1460 non-null   int64  \n 5   Street         1460 non-null   object \n 6   Alley          1460 non-null   object \n 7   LotShape       1460 non-null   object \n 8   LandContour    1460 non-null   object \n 9   Utilities      1460 non-null   object \n 10  LotConfig      1460 non-null   object \n 11  LandSlope      1460 non-null   object \n 12  Neighborhood   1460 non-null   object \n 13  Condition1     1460 non-null   object \n 14  Condition2     1460 non-null   object \n 15  BldgType       1460 non-null   object \n 16  HouseStyle     1460 non-null   object \n 17  OverallQual    1460 non-null   int64  \n 18  OverallCond    1460 non-null   int64  \n 19  YearBuilt      1460 non-null   int64  \n 20  YearRemodAdd   1460 non-null   int64  \n 21  RoofStyle      1460 non-null   object \n 22  RoofMatl       1460 non-null   object \n 23  Exterior1st    1460 non-null   object \n 24  Exterior2nd    1460 non-null   object \n 25  MasVnrType     1460 non-null   object \n 26  MasVnrArea     1460 non-null   float64\n 27  ExterQual      1460 non-null   object \n 28  ExterCond      1460 non-null   object \n 29  Foundation     1460 non-null   object \n 30  BsmtQual       1460 non-null   object \n 31  BsmtCond       1460 non-null   object \n 32  BsmtExposure   1460 non-null   object \n 33  BsmtFinType1   1460 non-null   object \n 34  BsmtFinSF1     1460 non-null   int64  \n 35  BsmtFinType2   1460 non-null   object \n 36  BsmtFinSF2     1460 non-null   int64  \n 37  BsmtUnfSF      1460 non-null   int64  \n 38  TotalBsmtSF    1460 non-null   int64  \n 39  Heating        1460 non-null   object \n 40  HeatingQC      1460 non-null   object \n 41  CentralAir     1460 non-null   object \n 42  Electrical     1460 non-null   object \n 43  1stFlrSF       1460 non-null   int64  \n 44  2ndFlrSF       1460 non-null   int64  \n 45  LowQualFinSF   1460 non-null   int64  \n 46  GrLivArea      1460 non-null   int64  \n 47  BsmtFullBath   1460 non-null   int64  \n 48  BsmtHalfBath   1460 non-null   int64  \n 49  FullBath       1460 non-null   int64  \n 50  HalfBath       1460 non-null   int64  \n 51  BedroomAbvGr   1460 non-null   int64  \n 52  KitchenAbvGr   1460 non-null   int64  \n 53  KitchenQual    1460 non-null   object \n 54  TotRmsAbvGrd   1460 non-null   int64  \n 55  Functional     1460 non-null   object \n 56  Fireplaces     1460 non-null   int64  \n 57  FireplaceQu    1460 non-null   object \n 58  GarageType     1460 non-null   object \n 59  GarageYrBlt    1460 non-null   float64\n 60  GarageFinish   1460 non-null   object \n 61  GarageCars     1460 non-null   int64  \n 62  GarageArea     1460 non-null   int64  \n 63  GarageQual     1460 non-null   object \n 64  GarageCond     1460 non-null   object \n 65  PavedDrive     1460 non-null   object \n 66  WoodDeckSF     1460 non-null   int64  \n 67  OpenPorchSF    1460 non-null   int64  \n 68  EnclosedPorch  1460 non-null   int64  \n 69  3SsnPorch      1460 non-null   int64  \n 70  ScreenPorch    1460 non-null   int64  \n 71  PoolArea       1460 non-null   int64  \n 72  PoolQC         1460 non-null   object \n 73  Fence          1460 non-null   object \n 74  MiscFeature    1460 non-null   object \n 75  MiscVal        1460 non-null   int64  \n 76  MoSold         1460 non-null   int64  \n 77  YrSold         1460 non-null   int64  \n 78  SaleType       1460 non-null   object \n 79  SaleCondition  1460 non-null   object \n 80  SalePrice      1460 non-null   int64  \ndtypes: float64(3), int64(35), object(43)\nmemory usage: 924.0+ KB\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"for col in ['MSZoning', 'Functional', 'Utilities', 'Exterior2nd', 'Exterior1st', 'SaleType', 'KitchenQual']:\n    test_data[col].fillna(test_data[col].mode()[0], inplace=True)\nfor col in ['BsmtFullBath', 'BsmtHalfBath', 'BsmtFinSF2', 'GarageArea', 'BsmtFinSF1', 'GarageCars', 'TotalBsmtSF', 'BsmtUnfSF']:\n    test_data[col].fillna(test_data[col].median(), inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:19.678118Z","iopub.execute_input":"2024-09-27T08:47:19.679452Z","iopub.status.idle":"2024-09-27T08:47:19.700450Z","shell.execute_reply.started":"2024-09-27T08:47:19.679407Z","shell.execute_reply":"2024-09-27T08:47:19.699243Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/258063813.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna(test_data[col].mode()[0], inplace=True)\n/tmp/ipykernel_30/258063813.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna(test_data[col].median(), inplace=True)\n/tmp/ipykernel_30/258063813.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna(test_data[col].median(), inplace=True)\n/tmp/ipykernel_30/258063813.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna(test_data[col].median(), inplace=True)\n/tmp/ipykernel_30/258063813.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna(test_data[col].median(), inplace=True)\n/tmp/ipykernel_30/258063813.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna(test_data[col].median(), inplace=True)\n/tmp/ipykernel_30/258063813.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna(test_data[col].median(), inplace=True)\n/tmp/ipykernel_30/258063813.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna(test_data[col].median(), inplace=True)\n/tmp/ipykernel_30/258063813.py:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test_data[col].fillna(test_data[col].median(), inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(train_data.info())","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:19.852402Z","iopub.execute_input":"2024-09-27T08:47:19.852829Z","iopub.status.idle":"2024-09-27T08:47:19.875439Z","shell.execute_reply.started":"2024-09-27T08:47:19.852789Z","shell.execute_reply":"2024-09-27T08:47:19.873986Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 81 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1460 non-null   int64  \n 1   MSSubClass     1460 non-null   int64  \n 2   MSZoning       1460 non-null   object \n 3   LotFrontage    1460 non-null   float64\n 4   LotArea        1460 non-null   int64  \n 5   Street         1460 non-null   object \n 6   Alley          1460 non-null   object \n 7   LotShape       1460 non-null   object \n 8   LandContour    1460 non-null   object \n 9   Utilities      1460 non-null   object \n 10  LotConfig      1460 non-null   object \n 11  LandSlope      1460 non-null   object \n 12  Neighborhood   1460 non-null   object \n 13  Condition1     1460 non-null   object \n 14  Condition2     1460 non-null   object \n 15  BldgType       1460 non-null   object \n 16  HouseStyle     1460 non-null   object \n 17  OverallQual    1460 non-null   int64  \n 18  OverallCond    1460 non-null   int64  \n 19  YearBuilt      1460 non-null   int64  \n 20  YearRemodAdd   1460 non-null   int64  \n 21  RoofStyle      1460 non-null   object \n 22  RoofMatl       1460 non-null   object \n 23  Exterior1st    1460 non-null   object \n 24  Exterior2nd    1460 non-null   object \n 25  MasVnrType     1460 non-null   object \n 26  MasVnrArea     1460 non-null   float64\n 27  ExterQual      1460 non-null   object \n 28  ExterCond      1460 non-null   object \n 29  Foundation     1460 non-null   object \n 30  BsmtQual       1460 non-null   object \n 31  BsmtCond       1460 non-null   object \n 32  BsmtExposure   1460 non-null   object \n 33  BsmtFinType1   1460 non-null   object \n 34  BsmtFinSF1     1460 non-null   int64  \n 35  BsmtFinType2   1460 non-null   object \n 36  BsmtFinSF2     1460 non-null   int64  \n 37  BsmtUnfSF      1460 non-null   int64  \n 38  TotalBsmtSF    1460 non-null   int64  \n 39  Heating        1460 non-null   object \n 40  HeatingQC      1460 non-null   object \n 41  CentralAir     1460 non-null   object \n 42  Electrical     1460 non-null   object \n 43  1stFlrSF       1460 non-null   int64  \n 44  2ndFlrSF       1460 non-null   int64  \n 45  LowQualFinSF   1460 non-null   int64  \n 46  GrLivArea      1460 non-null   int64  \n 47  BsmtFullBath   1460 non-null   int64  \n 48  BsmtHalfBath   1460 non-null   int64  \n 49  FullBath       1460 non-null   int64  \n 50  HalfBath       1460 non-null   int64  \n 51  BedroomAbvGr   1460 non-null   int64  \n 52  KitchenAbvGr   1460 non-null   int64  \n 53  KitchenQual    1460 non-null   object \n 54  TotRmsAbvGrd   1460 non-null   int64  \n 55  Functional     1460 non-null   object \n 56  Fireplaces     1460 non-null   int64  \n 57  FireplaceQu    1460 non-null   object \n 58  GarageType     1460 non-null   object \n 59  GarageYrBlt    1460 non-null   float64\n 60  GarageFinish   1460 non-null   object \n 61  GarageCars     1460 non-null   int64  \n 62  GarageArea     1460 non-null   int64  \n 63  GarageQual     1460 non-null   object \n 64  GarageCond     1460 non-null   object \n 65  PavedDrive     1460 non-null   object \n 66  WoodDeckSF     1460 non-null   int64  \n 67  OpenPorchSF    1460 non-null   int64  \n 68  EnclosedPorch  1460 non-null   int64  \n 69  3SsnPorch      1460 non-null   int64  \n 70  ScreenPorch    1460 non-null   int64  \n 71  PoolArea       1460 non-null   int64  \n 72  PoolQC         1460 non-null   object \n 73  Fence          1460 non-null   object \n 74  MiscFeature    1460 non-null   object \n 75  MiscVal        1460 non-null   int64  \n 76  MoSold         1460 non-null   int64  \n 77  YrSold         1460 non-null   int64  \n 78  SaleType       1460 non-null   object \n 79  SaleCondition  1460 non-null   object \n 80  SalePrice      1460 non-null   int64  \ndtypes: float64(3), int64(35), object(43)\nmemory usage: 924.0+ KB\nNone\n","output_type":"stream"}]},{"cell_type":"code","source":"categorical_cols=train_data.select_dtypes(include=['object']).columns\nprint(categorical_cols)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:19.999226Z","iopub.execute_input":"2024-09-27T08:47:20.000157Z","iopub.status.idle":"2024-09-27T08:47:20.008187Z","shell.execute_reply.started":"2024-09-27T08:47:20.000113Z","shell.execute_reply":"2024-09-27T08:47:20.006765Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Index(['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature',\n       'SaleType', 'SaleCondition'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"for col in train_data.select_dtypes(include=['object']).columns:\n    print(f\"{col}: {train_data[col].nunique()} categorías únicas\")","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:20.149356Z","iopub.execute_input":"2024-09-27T08:47:20.150529Z","iopub.status.idle":"2024-09-27T08:47:20.167950Z","shell.execute_reply.started":"2024-09-27T08:47:20.150483Z","shell.execute_reply":"2024-09-27T08:47:20.166801Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"MSZoning: 5 categorías únicas\nStreet: 2 categorías únicas\nAlley: 3 categorías únicas\nLotShape: 4 categorías únicas\nLandContour: 4 categorías únicas\nUtilities: 2 categorías únicas\nLotConfig: 5 categorías únicas\nLandSlope: 3 categorías únicas\nNeighborhood: 25 categorías únicas\nCondition1: 9 categorías únicas\nCondition2: 8 categorías únicas\nBldgType: 5 categorías únicas\nHouseStyle: 8 categorías únicas\nRoofStyle: 6 categorías únicas\nRoofMatl: 8 categorías únicas\nExterior1st: 15 categorías únicas\nExterior2nd: 16 categorías únicas\nMasVnrType: 4 categorías únicas\nExterQual: 4 categorías únicas\nExterCond: 5 categorías únicas\nFoundation: 6 categorías únicas\nBsmtQual: 5 categorías únicas\nBsmtCond: 5 categorías únicas\nBsmtExposure: 5 categorías únicas\nBsmtFinType1: 7 categorías únicas\nBsmtFinType2: 7 categorías únicas\nHeating: 6 categorías únicas\nHeatingQC: 5 categorías únicas\nCentralAir: 2 categorías únicas\nElectrical: 5 categorías únicas\nKitchenQual: 4 categorías únicas\nFunctional: 7 categorías únicas\nFireplaceQu: 6 categorías únicas\nGarageType: 7 categorías únicas\nGarageFinish: 4 categorías únicas\nGarageQual: 6 categorías únicas\nGarageCond: 6 categorías únicas\nPavedDrive: 3 categorías únicas\nPoolQC: 4 categorías únicas\nFence: 5 categorías únicas\nMiscFeature: 5 categorías únicas\nSaleType: 9 categorías únicas\nSaleCondition: 6 categorías únicas\n","output_type":"stream"}]},{"cell_type":"code","source":"columns_to_encode = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'LotConfig', 'LandSlope', \n                     'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', \n                     'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', \n                     'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', \n                     'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', \n                     'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', \n                     'SaleType', 'SaleCondition', ]\ntrain_data=pd.get_dummies(train_data, columns=columns_to_encode,drop_first=True)\ntest_data=pd.get_dummies(test_data, columns=columns_to_encode,drop_first=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:20.397026Z","iopub.execute_input":"2024-09-27T08:47:20.397459Z","iopub.status.idle":"2024-09-27T08:47:20.482077Z","shell.execute_reply.started":"2024-09-27T08:47:20.397419Z","shell.execute_reply":"2024-09-27T08:47:20.480959Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"train_data=pd.get_dummies(train_data, columns=['Utilities'],drop_first=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:20.583372Z","iopub.execute_input":"2024-09-27T08:47:20.583801Z","iopub.status.idle":"2024-09-27T08:47:20.598529Z","shell.execute_reply.started":"2024-09-27T08:47:20.583762Z","shell.execute_reply":"2024-09-27T08:47:20.597286Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"test_data=pd.get_dummies(test_data, columns=['Utilities'],drop_first=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:21.117157Z","iopub.execute_input":"2024-09-27T08:47:21.117661Z","iopub.status.idle":"2024-09-27T08:47:21.132541Z","shell.execute_reply.started":"2024-09-27T08:47:21.117620Z","shell.execute_reply":"2024-09-27T08:47:21.131240Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"print(train_data['Neighborhood'].value_counts())\nprint(train_data['Exterior1st'].value_counts())\nprint(train_data['Exterior2nd'].value_counts())","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:21.620445Z","iopub.execute_input":"2024-09-27T08:47:21.620944Z","iopub.status.idle":"2024-09-27T08:47:21.633772Z","shell.execute_reply.started":"2024-09-27T08:47:21.620901Z","shell.execute_reply":"2024-09-27T08:47:21.632217Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Neighborhood\nNAmes      225\nCollgCr    150\nOldTown    113\nEdwards    100\nSomerst     86\nGilbert     79\nNridgHt     77\nSawyer      74\nNWAmes      73\nSawyerW     59\nBrkSide     58\nCrawfor     51\nMitchel     49\nNoRidge     41\nTimber      38\nIDOTRR      37\nClearCr     28\nStoneBr     25\nSWISU       25\nMeadowV     17\nBlmngtn     17\nBrDale      16\nVeenker     11\nNPkVill      9\nBlueste      2\nName: count, dtype: int64\nExterior1st\nVinylSd    515\nHdBoard    222\nMetalSd    220\nWd Sdng    206\nPlywood    108\nCemntBd     61\nBrkFace     50\nWdShing     26\nStucco      25\nAsbShng     20\nBrkComm      2\nStone        2\nAsphShn      1\nImStucc      1\nCBlock       1\nName: count, dtype: int64\nExterior2nd\nVinylSd    504\nMetalSd    214\nHdBoard    207\nWd Sdng    197\nPlywood    142\nCmentBd     60\nWd Shng     38\nStucco      26\nBrkFace     25\nAsbShng     20\nImStucc     10\nBrk Cmn      7\nStone        5\nAsphShn      3\nOther        1\nCBlock       1\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"# Función para agrupar categorías raras en 'Other'\ndef group_rare_categories_safe(column, train_data, threshold):\n    # Encontrar las categorías más comunes (con más de `threshold` ocurrencias)\n    common_categories = train_data[column].value_counts()[train_data[column].value_counts() > threshold].index\n    # Reemplazar las categorías raras con 'Other' solo para las categorías que tienen menos ocurrencias\n    train_data[column] = train_data[column].apply(lambda x: x if x in common_categories else 'Other')\n    return train_data\n\n# Agrupar categorías raras para Neighborhood con threshold de 40\ntrain_data = group_rare_categories_safe('Neighborhood', train_data, 40)\n\n# Agrupar categorías raras para Exterior1st y Exterior2nd con threshold de 20\ntrain_data = group_rare_categories_safe('Exterior1st', train_data, 20)\ntrain_data = group_rare_categories_safe('Exterior2nd', train_data, 20)\n\n# Verificar que las categorías se agruparon correctamente\nprint(train_data['Neighborhood'].value_counts())\nprint(train_data['Exterior1st'].value_counts())\nprint(train_data['Exterior2nd'].value_counts())\n","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:22.711123Z","iopub.execute_input":"2024-09-27T08:47:22.711606Z","iopub.status.idle":"2024-09-27T08:47:22.740411Z","shell.execute_reply.started":"2024-09-27T08:47:22.711562Z","shell.execute_reply":"2024-09-27T08:47:22.738969Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Neighborhood\nOther      225\nNAmes      225\nCollgCr    150\nOldTown    113\nEdwards    100\nSomerst     86\nGilbert     79\nNridgHt     77\nSawyer      74\nNWAmes      73\nSawyerW     59\nBrkSide     58\nCrawfor     51\nMitchel     49\nNoRidge     41\nName: count, dtype: int64\nExterior1st\nVinylSd    515\nHdBoard    222\nMetalSd    220\nWd Sdng    206\nPlywood    108\nCemntBd     61\nBrkFace     50\nOther       27\nWdShing     26\nStucco      25\nName: count, dtype: int64\nExterior2nd\nVinylSd    504\nMetalSd    214\nHdBoard    207\nWd Sdng    197\nPlywood    142\nCmentBd     60\nOther       47\nWd Shng     38\nStucco      26\nBrkFace     25\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"# Función para agrupar categorías raras en 'Other' en test_data\ndef group_rare_categories_safe(column, test_data, threshold):\n    # Encontrar las categorías más comunes en train_data (esto asegura que los datasets sean consistentes)\n    common_categories = train_data[column].value_counts()[train_data[column].value_counts() > threshold].index\n    # Reemplazar las categorías raras con 'Other' en test_data basándose en las categorías comunes de train_data\n    test_data[column] = test_data[column].apply(lambda x: x if x in common_categories else 'Other')\n    return test_data\n\n# Agrupar categorías raras en test_data para Neighborhood (umbral de 40)\ntest_data = group_rare_categories_safe('Neighborhood', test_data, 40)\n\n# Agrupar categorías raras en test_data para Exterior1st y Exterior2nd (umbral de 20)\ntest_data = group_rare_categories_safe('Exterior1st', test_data, 20)\ntest_data = group_rare_categories_safe('Exterior2nd', test_data, 20)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:23.290709Z","iopub.execute_input":"2024-09-27T08:47:23.291149Z","iopub.status.idle":"2024-09-27T08:47:23.314497Z","shell.execute_reply.started":"2024-09-27T08:47:23.291107Z","shell.execute_reply":"2024-09-27T08:47:23.313012Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"# Aplicar One-Hot Encoding a las columnas de train_data\ntrain_data = pd.get_dummies(train_data, columns=['Neighborhood', 'Exterior1st', 'Exterior2nd'], drop_first=True)\n# Aplicar One-Hot Encoding a las columnas de test_data\ntest_data = pd.get_dummies(test_data, columns=['Neighborhood', 'Exterior1st', 'Exterior2nd'], drop_first=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:23.918830Z","iopub.execute_input":"2024-09-27T08:47:23.919355Z","iopub.status.idle":"2024-09-27T08:47:23.938657Z","shell.execute_reply.started":"2024-09-27T08:47:23.919311Z","shell.execute_reply":"2024-09-27T08:47:23.937514Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"train_columns = set(train_data.columns)\ntest_columns = set(test_data.columns)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:24.958776Z","iopub.execute_input":"2024-09-27T08:47:24.959262Z","iopub.status.idle":"2024-09-27T08:47:24.965392Z","shell.execute_reply.started":"2024-09-27T08:47:24.959218Z","shell.execute_reply":"2024-09-27T08:47:24.963965Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"for col in train_columns - test_columns:\n    test_data[col] = 0\n# Ordenar las columnas de test_data para que coincidan con el orden de train_data\ntest_data = test_data[train_data.columns]\n\n# Verificar nuevamente las formas de los datasets y asegurarse de que coincidan\nprint(\"Forma de train_data:\", train_data.shape)\nprint(\"Forma de test_data:\", test_data.shape)","metadata":{"execution":{"iopub.status.busy":"2024-09-27T08:47:28.969330Z","iopub.execute_input":"2024-09-27T08:47:28.969788Z","iopub.status.idle":"2024-09-27T08:47:28.987839Z","shell.execute_reply.started":"2024-09-27T08:47:28.969720Z","shell.execute_reply":"2024-09-27T08:47:28.985933Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"Forma de train_data: (1460, 240)\nForma de test_data: (1459, 240)\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import RandomizedSearchCV\n\ny=train_data['SalePrice']\nX=train_data.drop(columns=['SalePrice','Id'],axis=1)\nX_train,X_val,y_train,y_val=train_test_split(X,y,test_size=0.1,random_state=20)\nmodel=RandomForestRegressor(random_state=20)\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_val)\nscore=mean_absolute_error(y_val,y_pred)\nprint(f\"MAE con RFRegressor: {score:.8}\")\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-27T09:13:41.844101Z","iopub.execute_input":"2024-09-27T09:13:41.844559Z","iopub.status.idle":"2024-09-27T09:13:45.052324Z","shell.execute_reply.started":"2024-09-27T09:13:41.844518Z","shell.execute_reply":"2024-09-27T09:13:45.050853Z"},"trusted":true},"execution_count":50,"outputs":[{"name":"stdout","text":"MAE: 16503.186\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.ensemble import GradientBoostingRegressor\n\nbest_model = GradientBoostingRegressor(random_state=20)\nbest_model.fit(X_train, y_train)\ny_pred = best_model.predict(X_val)\nscore = mean_absolute_error(y_val, y_pred)\nprint(f\"MAE con Gradient Boosting: {score:.8}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-27T09:26:44.586245Z","iopub.execute_input":"2024-09-27T09:26:44.587262Z","iopub.status.idle":"2024-09-27T09:26:45.588313Z","shell.execute_reply.started":"2024-09-27T09:26:44.587203Z","shell.execute_reply":"2024-09-27T09:26:45.586905Z"},"trusted":true},"execution_count":64,"outputs":[{"name":"stdout","text":"MAE con Gradient Boosting: 14203.264\n","output_type":"stream"}]},{"cell_type":"code","source":"from xgboost import XGBRegressor\n\nmodel = XGBRegressor(random_state=20)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_val)\nscore = mean_absolute_error(y_val, y_pred)\nprint(f\"MAE con XGBoost: {score:.8}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-27T09:26:41.957337Z","iopub.execute_input":"2024-09-27T09:26:41.957783Z","iopub.status.idle":"2024-09-27T09:26:42.796273Z","shell.execute_reply.started":"2024-09-27T09:26:41.957745Z","shell.execute_reply":"2024-09-27T09:26:42.794967Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stdout","text":"MAE con XGBoost: 16172.315\n","output_type":"stream"}]},{"cell_type":"code","source":"from lightgbm import LGBMRegressor\n\nmodel = LGBMRegressor(random_state=20)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_val)\nscore = mean_absolute_error(y_val, y_pred)\nprint(f\"MAE con LightGBM: {score:.8}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-27T09:14:20.710420Z","iopub.execute_input":"2024-09-27T09:14:20.710920Z","iopub.status.idle":"2024-09-27T09:14:22.673615Z","shell.execute_reply.started":"2024-09-27T09:14:20.710867Z","shell.execute_reply":"2024-09-27T09:14:22.672156Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.005166 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 3332\n[LightGBM] [Info] Number of data points in the train set: 1314, number of used features: 169\n[LightGBM] [Info] Start training from score 181311.707763\nMAE con LightGBM: 14468.922\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.ensemble import ExtraTreesRegressor\n\nmodel = ExtraTreesRegressor(random_state=20)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_val)\nscore = mean_absolute_error(y_val, y_pred)\nprint(f\"MAE con Extra Trees: {score:.8}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-27T09:14:36.786883Z","iopub.execute_input":"2024-09-27T09:14:36.787434Z","iopub.status.idle":"2024-09-27T09:14:39.970924Z","shell.execute_reply.started":"2024-09-27T09:14:36.787386Z","shell.execute_reply":"2024-09-27T09:14:39.969852Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stdout","text":"MAE con Extra Trees: 16996.764\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_val)\nscore = mean_absolute_error(y_val, y_pred)\nprint(f\"MAE con Regresión Lineal: {score:.8}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-27T09:15:03.627918Z","iopub.execute_input":"2024-09-27T09:15:03.629060Z","iopub.status.idle":"2024-09-27T09:15:17.501079Z","shell.execute_reply.started":"2024-09-27T09:15:03.629005Z","shell.execute_reply":"2024-09-27T09:15:17.499871Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"MAE con Regresión Lineal: 20219.511\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.linear_model import Ridge\n\nmodel = Ridge()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_val)\nscore = mean_absolute_error(y_val, y_pred)\nprint(f\"MAE con Ridge: {score:.8}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-27T09:24:53.144591Z","iopub.execute_input":"2024-09-27T09:24:53.145247Z","iopub.status.idle":"2024-09-27T09:24:53.648879Z","shell.execute_reply.started":"2024-09-27T09:24:53.145193Z","shell.execute_reply":"2024-09-27T09:24:53.646633Z"},"trusted":true},"execution_count":57,"outputs":[{"name":"stdout","text":"MAE con Ridge: 17443.088\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.linear_model import Lasso\n\nmodel = Lasso()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_val)\nscore = mean_absolute_error(y_val, y_pred)\nprint(f\"MAE con Lasso: {score:.8}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-27T09:25:08.127848Z","iopub.execute_input":"2024-09-27T09:25:08.128322Z","iopub.status.idle":"2024-09-27T09:25:08.464919Z","shell.execute_reply.started":"2024-09-27T09:25:08.128279Z","shell.execute_reply":"2024-09-27T09:25:08.462899Z"},"trusted":true},"execution_count":58,"outputs":[{"name":"stdout","text":"MAE con Lasso: 19900.953\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.069e+11, tolerance: 8.378e+08\n  model = cd_fast.enet_coordinate_descent(\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsRegressor\n\nmodel = KNeighborsRegressor()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_val)\nscore = mean_absolute_error(y_val, y_pred)\nprint(f\"MAE con KNN: {score:.8}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-27T09:25:20.531385Z","iopub.execute_input":"2024-09-27T09:25:20.532358Z","iopub.status.idle":"2024-09-27T09:25:20.605683Z","shell.execute_reply.started":"2024-09-27T09:25:20.532309Z","shell.execute_reply":"2024-09-27T09:25:20.604268Z"},"trusted":true},"execution_count":59,"outputs":[{"name":"stdout","text":"MAE con KNN: 25088.281\n","output_type":"stream"}]},{"cell_type":"code","source":"#De todos, el que menor MAE nos ha dado es GradientBoostingRegressor, haremos los test con el\nX_test = test_data.drop(columns=['Id'], axis=1)\ntest_predictions = best_model.predict(X_test)\noutput = pd.DataFrame({'Id': test_data['Id'], 'SalePrice': test_predictions})\noutput.to_csv('predicciones_submission.csv', index=False)\nprint(\"Predicciones guardadas en 'predicciones_submission.csv'\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-27T09:30:18.044525Z","iopub.execute_input":"2024-09-27T09:30:18.045063Z","iopub.status.idle":"2024-09-27T09:30:18.075353Z","shell.execute_reply.started":"2024-09-27T09:30:18.045015Z","shell.execute_reply":"2024-09-27T09:30:18.073870Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stdout","text":"Predicciones guardadas en 'predicciones_submission.csv'\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-09-27T09:29:53.110737Z","iopub.execute_input":"2024-09-27T09:29:53.111240Z","iopub.status.idle":"2024-09-27T09:29:53.119117Z","shell.execute_reply.started":"2024-09-27T09:29:53.111162Z","shell.execute_reply":"2024-09-27T09:29:53.118033Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}